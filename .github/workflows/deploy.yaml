name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Init and Apply
      run: |
        cd infrastructure/terraform
        terraform init
        terraform apply -auto-approve \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}"
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: task-management
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f server/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Upload CLI to S3
      run: |
        aws s3 cp cli/build/libs/taskmanagement-cli.jar s3://task-management-cli/taskmanagement-cli-latest.jar

    - name: Get DB Endpoint
      id: get_endpoint
      run: |
        cd infrastructure/terraform
        echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT

    - name: Run Flyway Migration
      run: |
        ./gradlew flywayMigrate \
          -Dflyway.url=jdbc:postgresql://${{ steps.get_endpoint.outputs.db_endpoint }}/taskmanagement \
          -Dflyway.user=${{ secrets.DB_USERNAME }} \
          -Dflyway.password=${{ secrets.DB_PASSWORD }}
    
    - name: Force new deployment
      run: |
        aws ecs update-service --cluster task-management-cluster --service task-management-service --force-new-deployment
